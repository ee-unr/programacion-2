---
title: "üß© Problemas"
---

## Cifrado C√©sar

En criptograf√≠a, el [cifrado C√©sar](https://es.wikipedia.org/wiki/Cifrado_C%C3%A9sar) es una de
las t√©cnicas de cifrado m√°s simples y m√°s usadas.

Es un tipo de cifrado en el que una letra en el texto original es reemplazada por otra letra que
se encuentra un n√∫mero fijo de posiciones m√°s adelante en el alfabeto.

Por ejemplo, con un desplazamiento de 3, la A ser√≠a sustituida por la D
(situada 3 lugares a la derecha de la A), la B ser√≠a reemplazada por la E, etc.

![](imgs/cifrado_cesar.png){width=400, fig-align="center"}

Escriba una funci√≥n, y luego un _script_, que permita cifrar y descifrar cadenas usando el
cifrado C√©sar con un n√∫mero arbitrario de posiciones.

Dos funciones incluidas con Python que pueden ser √∫tiles para esta tarea son `ord()`,
que convierte caracteres num√©ricos a n√∫meros, y `chr()`, que realiza la operaci√≥n inversa.

::: {.callout-tip collapse="true"}

## Ayuda

Para el cifrado de un √∫nico caracter:

* Definir un `desplazamiento`, por ejemplo `3`.
* Convertir el caracter a n√∫mero usando `ord()`.
* Sumarle `desplazamiento`.
* Finalmente, convertirlo a caracter nuevamente utilizando `chr()`.

Y para el descifrado:

* Convertir el caracter a n√∫mero.
* Restarle `desplazamiento`.
* Convertirlo a caracter nuevamente utilizando `chr()`.

As√≠, se deber√≠a recuperar el caracter definido al principio.

:::

## N√∫meros aleatorios

Construya un programa en Python que genere una cantidad determinada de n√∫meros aleatorios
uniformes dentro de un rango definido por el usuario. El programa debe:

* Solicitar al usuario la cantidad de n√∫meros a generar y los valores m√≠nimo y m√°ximo del rango.
* Generar los n√∫meros aleatorios
* Guardar los n√∫meros en un archivo de texto, uno por l√≠nea.
* Ofrecer la opci√≥n de mostrar un resumen estad√≠stico con m√≠nimo, m√°ximo, media y desv√≠o est√°ndar,
solo si el usuario lo solicita.

Para resolver este problema utilice el m√≥dulo `random` y las funciones desarrolladas en el
ejercicio **Res√∫menes estad√≠sticos** guardadas en un m√≥dulo llamado `estadistica.py`.

## Mensaje al descubierto

Resulta que Franco, un amigo que estudia Ciencias de la Computaci√≥n en la FCEIA, te env√≠a por
WhatsApp un archivo de texto plano con mensajes "encriptados" usando caracteres sobrantes y
s√≠mbolos extra√±os:

```
    !!!,.,  aY??/u/DAM**e,, se =m!!e
&&M&&e v!o!?LV...I.O /L/*oC/*o
        __?e_?l//+ T++**e/*Cl!?aD==*O**
```

Tiene sentido pensar que est√° experimentando con nuevos algoritmos de cifrado y, de paso, te
lanza el reto de descifrarlo.

Tu misi√≥n es escribir un programa que:

1. Lea un archivo de texto plano cualquiera.
1. Muestre en pantalla su contenido original (tal cual llega).
1. Aplique un proceso de limpieza basado en las siguientes reglas:
    i. Eliminar todos los caracteres `+`, `*`, `-`, `/`, `=`, `!`, `?`, `&` y `_`.
    i. Reemplazar cualquier secuencia de espacios m√∫ltiples por un solo espacio.
    i. Homogeinizar la capitalizaci√≥n de los caracteres.
    i. Conservar los saltos de l√≠nea tal cual aparecen en el archivo original.
1. Muestre en pantalla la versi√≥n desencriptada del texto.
1. Guarde la versi√≥n limpia en un nuevo archivo de texto.
    * El usuario debe poder especificar el nombre del archivo de salida.
    * Si no lo hace, se generar√° uno con el sufijo `_limpio` antes de la extensi√≥n original
    (por ejemplo, `secreto.txt` ‚Üí `secreto_limpio.txt`).

## C√≥digo Morse

El c√≥digo Morse es un sistema utilizado para representar letras mediante combinaciones espec√≠ficas
de se√±ales cortas y largas, denominadas puntos (`.`) y rayas (`-`).
A continuaci√≥n se muestra un diccionario con el mapeo de caracteres alfab√©ticos,
d√≠gitos del 0 al 9 y algunos s√≠mbolos de puntuaci√≥n comunes:

```python
mapeo_morse = {
    "A": ".-",
    "B": "-...",
    "C": "-.-.",
    "D": "-..",
    "E": ".",
    "F": "..-.",
    "G": "--.",
    "H": "....",
    "I": "..",
    "J": ".---",
    "K": "-.-",
    "L": ".-..",
    "M": "--",
    "N": "-.",
    "O": "---",
    "P": ".--.",
    "Q": "--.-",
    "R": ".-.",
    "S": "...",
    "T": "-",
    "U": "..-",
    "V": "...-",
    "W": ".--",
    "X": "-..-",
    "Y": "-.--",
    "Z": "--..",
    "1": ".----",
    "2": "..---",
    "3": "...--",
    "4": "....-",
    "5": ".....",
    "6": "-....",
    "7": "--...",
    "8": "---..",
    "9": "----.",
    "0": "-----",
    ", ": "--..--",
    ".": ".-.-.-",
}
```

Escriba una funci√≥n en Python que permita convertir cualquier palabra a c√≥digo Morse utilizando
este diccionario. Luego, escriba otra funci√≥n que haga exactamente lo contrario:
dada una secuencia en c√≥digo Morse, debe recuperar la palabra original. Finalmente, incorpore
ambas funciones en un _script_ principal que combine ambas funciones y permita encriptar o
desencriptar texto desde un archivo de texto plano. El programa debe recibir:

* El nombre del archivo de entrada.
* El nombre del archivo de salida.
* La operaci√≥n a realizar (encriptar o desencriptar).

**Ayuda**: Para indicar espacios en c√≥digo Morse utilice `/`. 