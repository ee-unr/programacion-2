---
title: "ðŸªž AutoevaluaciÃ³n"
---
<!-- 
1. Â¿CuÃ¡l es el resultado de `int(True)` y de `int(False)`?
1. `1 is True`, `bool(1) is True`, `2 == True`, `bool(2) is True`.
1. Â¿CuÃ¡l es el resultado de las siguientes expresiones? Â¿Por quÃ©?
    i. `False or not False`
    i. `not (True and True)`
    i. `not True and True`
    i. `"True" != True`
    i. `10 > 5 + 3`
    i. `None is None`
    i. `[] is []`
1. Complete la siguiente tabla indicando si el nombre es vÃ¡lido para una variable de Python.

    |     Nombre        | Â¿VÃ¡lido? | JustificaciÃ³n |
    |:-----------------:|:--------:|:-------------:|
    | `balance`         |          |               |
    | `balanceActual`   |          |               |
    | `balance-actual`  |          |               |
    | `balance actual`  |          |               |
    | `balance_actual`  |          |               |
    | `0cuenta`         |          |               |
    | `cuenta0`         |          |               |
    | `_cuenta`         |          |               |
    | `SPAM`            |          |               |
    | `cantidad$`       |          |               |

1. Â¿CuÃ¡l es el resultado de `len([])`? Â¿Y quÃ© pasa si se intenta hacer lo siguiente?

    ```python
    l = []
    l[0]
    ```

    Â¿Por quÃ©?
1. Â¿CuÃ¡l es el problema con el siguiente programa? Proponga una soluciÃ³n.

    ```python
    numero = 10
    if numero < 0:
        print(f"El numero {numero} es negativo")
    elif numero < -5:
        print(f"El numero {numero} es menor a -5")
    elif numero > 0:
        print(f"El numero {numero} es positivo")
    else:
        print(f"El numero {numero} es 0")
    ```


1. Â¿CuÃ¡l es el resultado de `list("abcdefgh")`? Â¿Por quÃ©?

1. Â¿Por quÃ© `set("abcde")` es distinto de `{"abcde"}`?

1.  Â¿QuÃ© valor contiene la variable `contador` luego de ejecutar el siguiente cÃ³digo?

    ```python
    contador = 20
    contador + 1
    ```

1. Â¿Por quÃ© la siguiente comparaciÃ³n resulta en `True`?

    ```python
    "spam" + "spamspam" == "spam" * 3
    ```


1. Â¿Por quÃ© la siguiente expresiÃ³n resulta en un error? Â¿CÃ³mo se puede arreglar?

    ```python
    "Me comÃ­ " + 6 + " panchos."
    ```

1. Â¿CuÃ¡les son los 3 operadores booleanos?

1. Explica quÃ© es una condiciÃ³n y en quÃ© situaciones se utilizarÃ­a.

1. IdentificÃ¡ los tres bloques de cÃ³digo en el siguiente ejemplo:

    ```python
    codigo = 0

    if codigo == 10:
        print("mensaje 1")
        if codigo > 5:
            print("mensaje 2")
        else:
            print("mensaje alternativo")
        print("mensaje final")

    print("Fin del programa")
    ```

    Â¿Tienen sentido las comparaciones utilizadas?


1. Â¿CuÃ¡l es la diferencia entre `range(10)`, `range(0, 10)` y `range(0, 10, 1)` en un bucle `for`?

1.  EscribÃ­ un programa corto que imprima los nÃºmeros del 1 al 10 utilizando un bucle `for`.
    Luego, escribÃ­ un programa equivalente que imprima los nÃºmeros del 1 al 10 utilizando un bucle
    `while`.


1.  Escriba un programa que recorra una lista de nÃºmeros y los vaya sumando uno por uno hasta que la
    suma acumulada sea igual o mayor a un determinado umbral (por ejemplo, 20).
    Primero, resuelva el problema utilizando un bucle `for`.
    Luego, implemente una versiÃ³n equivalente utilizando un bucle `while`.
    Al finalizar, el programa debe mostrar la suma total acumulada y la cantidad de nÃºmeros que fueron sumados.

    Utilice esta lista de ejemplo:

    ```python
    numeros = [4, 7, 3, 5, 2, 11, 20]
    ```

1. Â¿CuÃ¡ndo se ejecuta el cÃ³digo dentro de una funciÃ³n: cuando la funciÃ³n se define o cuando se la llama? Considere el siguiente ejemplo:

    ```python
    def suma(x, y):
        print(100 / 0)
        return x + y
    ```

1. Â¿CuÃ¡l es la diferencia entre una funciÃ³n y una llamada a funciÃ³n?

1. Â¿CuÃ¡l es el valor que devuelve una funciÃ³n que no tiene `return`?

- Â¿QuÃ© es `[]`?
- Â¿CÃ³mo asignarÃ­as el valor `'hello'` como el tercer valor en una lista almacenada en una variable llamada `spam`? (AsumÃ­ que `spam` contiene `[2, 4, 6, 8, 10]`).

  Para las siguientes tres preguntas, asumÃ­ que `spam` contiene la lista `['a', 'b', 'c', 'd']`:

- Â¿A quÃ© evalÃºa `spam[int(int('3' * 2) // 11)]`?
- Â¿A quÃ© evalÃºa `spam[-1]`?
- Â¿A quÃ© evalÃºa `spam[:2]`?

  Para las siguientes tres preguntas, asumÃ­ que `bacon` contiene la lista `[3.14, 'cat', 11, 'cat', True]`:

- Â¿A quÃ© evalÃºa `bacon.index('cat')`?
- Â¿CÃ³mo queda la lista en `bacon` despuÃ©s de ejecutar `bacon.append(99)`?
- Â¿CÃ³mo queda la lista en `bacon` despuÃ©s de ejecutar `bacon.remove('cat')`?

- Â¿CuÃ¡les son los operadores para la concatenaciÃ³n y la replicaciÃ³n de listas?
- Â¿CuÃ¡l es la diferencia entre los mÃ©todos `append()` e `insert()` de las listas?
- Â¿CuÃ¡les son dos formas de eliminar valores de una lista?


1. Â¿CÃ³mo se escribe en cÃ³digo un diccionario vacÃ­o?
2. Â¿CÃ³mo se ve un diccionario que tiene la clave `'foo'` y el valor `42`?
3. Â¿CuÃ¡l es la principal diferencia entre un diccionario y una lista?
4. Â¿QuÃ© ocurre si intentÃ¡s acceder a `spam['foo']` cuando `spam` es `{'bar': 100}`?
5. Si un diccionario estÃ¡ almacenado en `spam`, Â¿cuÃ¡l es la diferencia entre las expresiones `'cat' in spam` y `'cat' in spam.keys()`?
6. Si un diccionario estÃ¡ almacenado en `spam`, Â¿cuÃ¡l es la diferencia entre las expresiones `'cat' in spam` y `'cat' in spam.values()`? -->
