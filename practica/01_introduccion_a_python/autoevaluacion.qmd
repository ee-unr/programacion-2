---
title: "ðŸªž AutoevaluaciÃ³n"
number-depth: 3
toc-depth: 3
---

## Variables

1.  Â¿QuÃ© valor contiene la variable `contador` luego de ejecutar el siguiente cÃ³digo?

    ```python
    contador = 20
    contador + 1
    ```

1. Complete la siguiente tabla indicando si el nombre es vÃ¡lido para una variable de Python.

    |     Nombre        | Â¿VÃ¡lido? | JustificaciÃ³n |
    |:-----------------:|:--------:|:-------------:|
    | `balance`         |          |               |
    | `balanceActual`   |          |               |
    | `balance-actual`  |          |               |
    | `balance actual`  |          |               |
    | `balance_actual`  |          |               |
    | `mis.datos`       |          |               |
    | `0cuenta`         |          |               |
    | `cuenta0`         |          |               |
    | `_cuenta`         |          |               |
    | `SPAM`            |          |               |
    | `cantidad$`       |          |               |


## NÃºmeros

1. Â¿CuÃ¡l es el tipo de `10 / 2`? Â¿Por quÃ©?

1. Â¿CuÃ¡l es el tipo de `5 * 2`? Â¿Por quÃ©?

1. Â¿Por quÃ© `5 == 5.0` es `True`?

## Booleanos

1. Â¿CuÃ¡l es el resultado de las siguientes expresiones? Â¿Por quÃ©?

    ```python
    False or not False
    ```
    ```python
    not (True and True)
    ```

    ```python
    not True and True
    ```

    ```python
    "True" != True
    ```

    ```python
    10 > 5 + 3
    ```

    ```python
    None is None
    ```

    ```python
    False is False
    ```

1. Ejecute lÃ­nea por lÃ­nea los siguientes bloques y analice los resultados.

    ```python
    int(True) * 50
    True * 50
    ```

    ```python
    1 is True
    bool(1) is True
    id(True)
    id(bool(1))
    id(bool(1024))
    ```

1. Â¿CuÃ¡les son los 3 operadores booleanos?

## Cadenas de caracteres

1. Â¿Por quÃ© la siguiente comparaciÃ³n resulta en `True`?

    ```python
    "spam" + "spamspam" == "spam" * 3
    ```

1. Â¿Por quÃ© la siguiente expresiÃ³n resulta en un error? Â¿CÃ³mo se puede arreglar?

    ```python
    "Me comÃ­ " + 6 + " panchos."
    ```

1. Â¿Encuentra algo extraÃ±o en la siguiente expresiÃ³n? Â¿CÃ³mo lo mejorarÃ­an?

    ```python
    materia = "ProgramaciÃ³n 2"
    print("Â¡Sean bienvenidos a la materia {materia}!")
    ```

1. Explique por quÃ© es redundante utilizar `str()` en el siguiente bloque de cÃ³digo:

    ```python
    x, y = 10, 20
    print(f"La suma de {str(x)} y {str(y)} es: {str(x + y)}.")
    ```

1. Considere el siguiente bloque de cÃ³digo:

    ```python
    mensaje = "Hola, Â¿cÃ³mo estes?"
    mensaje[-3] = "Ã¡"
    ```

    - Â¿CuÃ¡l es la intenciÃ³n detrÃ¡s del programa?
    - Â¿Por quÃ© no funciona?
    - Â¿CÃ³mo podrÃ­a arreglarlo? Alerta: la soluciÃ³n no es muy elegante.

1. Â¿CuÃ¡l es el resultado de `list("abcdefgh")`? Â¿Por quÃ©?

1. Â¿Por quÃ© `set("abcde")` es distinto de `{"abcde"}`?

## Funciones

1. Â¿CuÃ¡l es la diferencia entre una funciÃ³n y una llamada a funciÃ³n?

1. Â¿CuÃ¡l es el valor que devuelve una funciÃ³n que no tiene `return`?

1. Â¿CuÃ¡ndo se ejecuta el cÃ³digo dentro de una funciÃ³n: cuando la funciÃ³n se define o cuando se la llama? Considere la siguiente funciÃ³n:

    ```python
    def suma(x, y):
        print(100 / 0)
        return x + y
    ```

    Luego, ejecute el siguiente bloque:

    ```python
    suma(2, 4)
    ```

## Listas

1. Â¿QuÃ© es `[]`? Â¿CuÃ¡l es el resultado de `len([])`?

1. Â¿Por quÃ© la siguiente expresiÃ³n resulta en `False`? Ayuda: use la funciÃ³n `id()`.

    ```python
    [] is []
    ```

1. Â¿Por quÃ© se obtiene un error en el siguiente bloque de cÃ³digo?

    ```python
    l = []
    l[0]
    ```

1. Â¿CÃ³mo le asignarÃ­a el valor `"hola"` como el tercer valor en una lista almacenada en una variable
llamada `cosas`? Asuma que `cosas` contiene `[2, 4, 6, 8, 10]`.

1. Asuma que `letras` contiene la lista `["a", "b", "c", "d"]`:
    - Â¿A quÃ© evalÃºa `letras[-1]`?
    - Â¿A quÃ© evalÃºa `letras[:2]`?
    - Â¿A quÃ© evalÃºa `letras[int(int('3' * 2) // 11)]`? Â¿Es necesario usar dos veces `int()`?

1. Asuma que `bartulos` contiene la lista `[3.14, "casa", 11, "casa", True]`:
    - Â¿A quÃ© evalÃºa `bartulos.index("casa")`? Â¿Por quÃ©?
    - Â¿CÃ³mo queda la lista en `bartulos` despuÃ©s de ejecutar `bartulos.append(99)`?
    - Â¿CÃ³mo queda la lista en `bartulos` despuÃ©s de ejecutar `bartulos.remove("casa"')` ?Â¿Por quÃ©?

1. Â¿CuÃ¡les son los operadores para la concatenaciÃ³n y la replicaciÃ³n de listas?

1. Â¿CuÃ¡l es la diferencia entre los mÃ©todos `append()` e `insert()` de las listas?

1. Â¿CuÃ¡les son dos formas de eliminar valores de una lista?

1. El siguiente bloque de cÃ³digo imprime `['a', 'b', True, 30]`. Â¿Por quÃ©?

    ```python
    cosas = ["a", "b", True]
    bartulos = cosas
    bartulos.append(20 + 10)
    print(cosas)
    ```

## Tuplas

1. Â¿Por quÃ© la tupla no implementa un mÃ©todo similar al mÃ©todo `.extend()` de las listas?

1. Las tuplas de Python son conocidas por ser inmutables. Por ejemplo, el siguiente bloque de cÃ³digo
resulta en un error:

    ```python
    tupla = (1, 2, 3)
    tupla[1] = 10
    ```

    Sin embargo, el siguiente bloque no arroja ningÃºn error y pareciera que se logra modificar la 
    tupla exitosamente:

    ```python
    bartulos = ["Hola", 10, None]
    tupla = (1, bartulos, 3)

    tupla[1].append("Â¡Sorpesa!")

    print(tupla)
    ```

    Â¿QuÃ© pasÃ³?

## Diccionarios

1. Â¿CÃ³mo se escribe en cÃ³digo un diccionario vacÃ­o?
1. Â¿CÃ³mo se ve un diccionario que tiene la clave `"cosa"` y el valor `15`?
1. Â¿CuÃ¡l es la principal diferencia entre un diccionario y una lista?
1. Â¿QuÃ© ocurre si se intenta acceder a `bartulos["cosa"]` cuando `bartulos` es `{"coso": 100}`?
1. Si un diccionario estÃ¡ almacenado en `bartulos`, Â¿cuÃ¡l es la diferencia entre las siguientes
expresiones?

    ```python
    "cosa" in bartulos
    "cosa" in bartulos.keys()
    ```

1. Suponga el diccionario `datos = {"nombre": "Juan"}`.
Â¿Por quÃ© la siguiente expresiÃ³n resulta en `False`?

    ```python
    "Juan" in datos
    ```


## Control de flujo

### Condicionales

1. Explique quÃ© es una condiciÃ³n y en quÃ© situaciones se utilizarÃ­a.

1. Identifique los tres bloques de cÃ³digo en el siguiente ejemplo:

    ```python
    codigo = 0

    if codigo == 10:
        print("mensaje 1")
        if codigo > 5:
            print("mensaje 2")
        else:
            print("mensaje alternativo")
        print("mensaje final")

    print("Fin del programa")
    ```

    Â¿Tienen sentido las comparaciones utilizadas?

1. Â¿CuÃ¡l es el problema con el siguiente programa? Proponga una soluciÃ³n.

    ```python
    numero = 10
    if numero < 0:
        print(f"El numero {numero} es negativo")
    elif numero < -5:
        print(f"El numero {numero} es menor a -5")
    elif numero > 0:
        print(f"El numero {numero} es positivo")
    else:
        print(f"El numero {numero} es 0")
    ```

### Bucles

1.  Considere el siguiente programa:

    ```python
    for i in range(10):
        print(i)
    ```

    Escriba un programa que realice la misma tarea utilizando un bucle `while`.

1. Â¿CuÃ¡l es la diferencia entre `range(10)`, `range(0, 10)` y `range(0, 10, 1)` en un bucle `for`?

1. Suponga que `numeros` es una lista que contiene numeros enteros, Â¿en quÃ© se diferencian los
siguientes bloques de cÃ³digo?

    ```python
    for i in numeros:
        if i % 2 == 0:
            break
        print(i)
    ```

    ```python
    for i in numeros:
        if i % 2 == 0:
            continue
        print(i)
    ```

1. Â¿Es posible re-escribir el siguiente bloque de cÃ³digo usando `while True`? Â¿QuÃ© modificaciones
habrÃ­a que hacer?

    ```python
    suma = 0
    i = 0
    while suma <= limite:
        suma += numeros[i]
        i += 1
    ```