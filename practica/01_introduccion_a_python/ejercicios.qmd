---
title: "üõ†Ô∏è Ejercicios"
---

## √Årea y per√≠metro de un c√≠rculo

Escriba una funci√≥n en Python que reciba el radio de un c√≠rculo y devuelva su √°rea.
Luego, escriba otra funci√≥n que tambi√©n reciba el radio de un c√≠rculo, pero devuelva su per√≠metro.
Finalmente, escriba una tercera funci√≥n que reciba el radio de un c√≠rculo y devuelva tanto el √°rea 
como el per√≠metro.

<!-- Para este √∫ltimo caso, implemente dos versiones:

1. La funci√≥n devuelve una lista o tupla.
2. La funci√≥n devuelve un diccionario.

¬øCu√°les son las ventajas y desventajas de cada alternativa?

 -->

::: {.callout-tip collapse="true"}

### Ayuda

$$
\begin{aligned}
A &= \pi \cdot r^2 \\
P &= 2 \cdot \pi \cdot r
\end{aligned}
$$

:::

## Promociones

Escriba una funci√≥n llamada `calcular_precio_final` que reciba dos argumentos:
el monto total de una compra y el medio de pago utilizado.

El medio de pago puede ser `'efectivo'`, `'d√©bito'` o `'cr√©dito'`, y seg√∫n el caso se aplicar√° una
modificaci√≥n sobre el monto:

- Si el medio de pago es `'efectivo'`, el monto no se modifica.
- Si es `'d√©bito'`, se aplica un descuento del 10% sobre el monto.
- Si es `'cr√©dito'`, se aplica un recargo del 5% sobre el monto.

La funci√≥n debe retornar el monto final a pagar, con el descuento o recargo aplicado seg√∫n
corresponda.

## Etapas de la vida

Implemente una funci√≥n que reciba una edad y devuelva un mensaje que indique la etapa de la vida
correspondiente.

Utilice una cadena de condicionales `if-elif-else` para clasificar la edad en alguno de los
siguientes grupos:

- Menor a 2 a√±os: beb√©.
- Entre 2 (inclusive) y 4 a√±os: infante.
- Entre 4 (inclusive) y 13 a√±os: ni√±o/a.
- Entre 13 (inclusive) y 20 a√±os: adolescente.
- Entre 20 (inclusive) y 65 a√±os: adulto/a.
- 65 a√±os o m√°s: persona mayor.

La funci√≥n debe imprimir un mensaje del tipo: `"La persona es un/a <etapa>"`.

## Conteo de frecuencias

Implemente una funci√≥n que reciba una lista de palabras y devuelva un diccionario donde las claves
sean las palabras y los valores la cantidad de veces que aparece cada una.
Utilice el siguiente ejemplo como validaci√≥n:

```python
contar_frecuencias(["manzana", "naranja", "manzana", "pera", "pera", "manzana"])
# {"manzana": 3, "naranja": 1, "pera": 2}
```

## Rendimento acad√©mico

Se cuenta con el siguiente diccionario que asocia nombres de estudiantes con una lista de sus
calificaciones:

```python
notas = {
    "Ana": [8, 9, 10],
    "Luis": [6, 7, 8, 3, 9],
    "Carla": [10, 9, 10],
    "Marcos": [5, 6],
    "Sof√≠a": [7, 7, 8],
    "Pedro": [6, 4, 5, 6, 3, 8],
    "Luc√≠a": [9, 8, 10, 9]
}
```

Implemente una funci√≥n que resuma el rendimiento acad√©mico de los estudiantes.
La funci√≥n debe recibir el diccionario de notas y un argumento adicional llamado `modo`.
Seg√∫n el valor de `modo`, se debe devolver un nuevo diccionario con la siguiente informaci√≥n:

* Si modo es `"promedio"`, se debe devolver el promedio de notas por estudiante.
* Si modo es `"proporcion"|, se debe devolver la proporci√≥n de ex√°menes aprobados por estudiante
(se considera aprobado todo valor mayor o igual a 6).

## √çndice de precios

Se cuenta con la serie mensual del √çndice de Precios al Consumidor (IPC) del a√±o 2024:

```python
ipc_2024 = [20.6, 13.2, 11.0, 8.8, 4.2, 4.6, 4.0, 4.2, 3.5, 2.7, 2.4, 2.7]
```

Realice los siguientes c√°lculos y an√°lisis:

* Determine el menor y el mayor √≠ndice reportado durante el a√±o.
* Calcule el IPC promedio mensual del 2024.
* Encuentre la diferencia entre el IPC m√≠nimo y m√°ximo del a√±o.
    - ¬øEn qu√© mes se registr√≥ la inflaci√≥n m√°s alta?
* Calcule la inflaci√≥n mediana del 2024.
* ¬øC√≥mo podr√≠a calcular el rango del IPC (diferencia entre el valor m√°ximo y m√≠nimo) sin usar
las funciones `min()` ni `max()`?

## Res√∫menes estad√≠sticos

Cree funciones que, dada una lista de n√∫meros, calculen los siguientes res√∫menes estad√≠sticos:

i. La media
    $$
    \text{media}(X) = \frac{1}{n}\sum_{i=1}^n{x_i}
    $$
i. El rango
    $$
    \text{rango}(X) = \text{max}(X) - \text{min}(X)
    $$
i. La varianza
    $$
    \text{var}(X) = \frac{1}{n}\sum_{i=1}^n{(x_i - \bar{x})^2}
    $$
i. El desv√≠o est√°ndar
    $$
    \text{sd}(X) = \sqrt{\text{var}(X)}
    $$
i. La mediana
    $$
    \begin{array}{lr}
    \text{mediana}(X) = x_{(\frac{n + 1}{2})} & \text{Si } n \text{ es impar} \\
    \text{mediana}(X) = \frac{x_{(\frac{n}{2})} + x_{(\frac{n}{2}+1)}}{2} & \text{Si } n \text{ es par}
    \end{array}
    $$

    donde los $x_{(i)}$ est√°n ordenados de manera ascendente.

## Potencias

Escriba una funci√≥n que reciba un n√∫mero entero `n` y una potencia m√°xima `b`.
La funci√≥n debe calcular las potencias de `n` desde $n^1$ hasta $n^b$.
Primero, implemente la funci√≥n para que devuelva todas las potencias en una lista.
Luego, modifique la funci√≥n para que devuelva cada potencia como un valor separado.
Reflexione sobre las diferencias entre devolver una lista
(un √∫nico objeto que contiene todos los resultados) y devolver m√∫ltiples valores separados.

## La f√≠sica del rebote

Una pelota de goma es lanzada desde una altura inicial de 100 metros.
Cada vez que toca el suelo, rebota alcanzando una altura equivalente a 3/5 de la altura desde
la que cay√≥.

Escriba un programa que imprima una tabla mostrando las alturas alcanzadas por la pelota en
cada uno de sus primeros 10 rebotes.

Luego, implemente este programa como una funci√≥n que reciba dos par√°metros:

* Altura inicial desde la que se lanza la pelota.
* Cantidad de rebotes que se desea calcular.

La funci√≥n debe devolver una lista con las alturas alcanzadas en cada rebote.

### Punto extra

Modifique la funci√≥n para que considere un rebote como "significativo" solo si la altura
alcanzada es mayor o igual a un valor m√≠nimo especificado (por ejemplo, 1 cent√≠metro).

Si la pelota no alcanza esta altura m√≠nima en alg√∫n rebote, se considera que ha completado su
aterrizaje y queda quieta. En este caso, la funci√≥n debe devolver √∫nicamente los valores
correspondientes a los "rebotes significativos"

## Validaci√≥n de DNI

Crear una funci√≥n que dada una cadena de caracteres verifique si se corresponde con un DNI.

Si es un DNI, devolver `True`. Caso contrario, devolver `Falso`.

A tener en cuenta:

* Algunos ejemplos de DNI v√°lidos
    * 39.979.127
    * 39979127
    * 4.497.785
* DNI no v√°lidos
    * 39,979,127
    * 39-979-127
    * 123456
    * ...

## Un mont√≥n de plata

Una ma√±ana pon√©s un billete en la vereda al lado del Monumento a la Bandera.
A partir de ah√≠, cada d√≠a vas y duplic√°s la cantidad de billetes, apil√°ndolos prolijamente.
¬øCu√°nto tiempo pasa antes de que la pila de billetes sea m√°s alta que la del Monumento?

::: {.callout-tip collapse="true"}

### Ayuda

Algunas constantes √∫tiles para resolver el problema:

```python
billete_grosor = 0.11 * 0.001  # grosor de un billete en metros
altura_monumento = 70          # altura en metros
```

**Sugerencia**: Usar un bucle `while` para realizar el c√°lculo.
:::

### Punto extra

Escribe una funci√≥n que permita determinar la cantidad de d√≠as necesarios para superar
cualquier altura arbitraria.

## La conjetura de Collatz

La [conjetura de Collatz](https://es.wikipedia.org/wiki/Conjetura_de_Collatz) dice:

> Si tomamos un n√∫mero natural cualquiera, su secuencia de Collatz termina llegando siempre al
n√∫mero 1.

Secuencia de Collatz:

* Si el n√∫mero es par, se divide entre 2.
* Si el n√∫mero es impar, se multiplica por 3 y se le suma 1.

$$
f(n) =
\begin{cases}
    \displaystyle \frac{n}{2} & \text{si } n \text{ es par,} \\ \\
    3n + 1 & \text{si } n \text{ es impar.}
\end{cases}
$$

Escribir una funci√≥n que calcule la secuencia de Collatz para un n√∫mero natural cualquiera.

::: {.callout-tip collapse="true"}

### Ayuda

* Utilizar bucle `while`.
* El bucle debe correr solo cuando el valor de la secuencia sigue siendo mayor a 1.
Si es 1, hay que frenar.
* Insertar los elementos de la secuencia en una lista.

:::

## Adivina el n√∫mero

Escriba un programa que implemente el cl√°sico juego "Adivina el n√∫mero".

El programa debe:

1. Tener un n√∫mero secreto (entero) que el usuario debe adivinar.
2. Solicitar al usuario que ingrese un n√∫mero.
3. Si el n√∫mero ingresado no coincide con el n√∫mero secreto:
    * Informar si el n√∫mero ingresado es mayor o menor que el n√∫mero secreto.
    * Pedir al usuario que intente nuevamente.
4. Si el usuario adivina el n√∫mero, el programa debe terminar mostrando un mensaje de felicitaciones.

::: {.callout-tip collapse="true"}

### Ayuda

Para generar n√∫meros aleatorios enteros en un rango dado puede utilizar `randint()` del m√≥dulo
`random`:

```python
import random
random.randint(-100,¬†100)     # Genera un n√∫mero aleatorio entre -100 y 100
```

:::

## Validador de contrase√±as

Escriba un programa que solicite al usuario una contrase√±a y verifique que cumpla con las
siguientes condiciones:

* Debe tener entre de 8 y 24 caracteres.
* Debe incluir letras, n√∫meros y caracteres especiales (`@#$%^&*()`).

Si la contrase√±a no es v√°lida, el programa debe informar al usuario qu√© condici√≥n no se cumple
y permitirle ingresar una nueva contrase√±a.
El proceso se repite hasta que el usuario ingrese una contrase√±a v√°lida o decida no continuar.

## Conteo de frecuencias a medida

Agregue a la funci√≥n `contar_frecuencias` del ejercicio **Conteo de frecuencias** un argumento
llamado `orden` que admita los valores `"aparicion"`, `"alfabetico"` y `"frecuencia"`.

Este argumento debe permitir ordenar las claves del diccionario resultante seg√∫n el siguiente
criterio:

* `"aparicion"`: mantiene el orden en que las palabras aparecen por primera vez en la lista original.
* `"alfabetico"`: ordena las palabras alfab√©ticamente.
* `"frecuencia"`: ordena las palabras por su frecuencia, de mayor a menor.


## Control interno (ELIMINAR)

* [ ] Tipo de datos elementales (agregar en **Preguntas**)
* [ ] Asignaci√≥n m√∫ltiple
* [x] Desestructuraci√≥n (se podr√≠a profundizar m√°s)
* [x] Operadores num√©ricos
* [x] Operadores l√≥gicos
* [x] Definici√≥n de funciones.
* [x] Ejecuci√≥n condicional de c√≥digo.
* Bucles definidos y no definidos
    * [x] `for`
    * [x] `while`
    * [ ] `break` (no estoy seguro de haberlo incluido)
    * [ ] `continue` (no estoy seguro de haberlo incluido)
* Estructuras de datos nativas de Python
    * [x] listas
    * [ ] tuplas (puede que haya, pero agregar m√°s)
    * [ ] conjuntos (no es tan necesario, aparece m√°s adelante)
    * [ ] diccionarios
    * [x] `range`
* Uso de c√≥digo externo (propio y de terceros).
    * [x] Librer√≠a est√°ndar de Python.
    * [x] Scripting.
    * [x] Modularizaci√≥n de programas.

### Comentarios

Temas que no son necesarios de cubrir _per se_ en la pr√°ctica:

* Expresiones
* Variables y asignaci√≥n
* M√≥dulos y librer√≠as (cubierto en clases de teor√≠a y de manera impl√≠cita en otros temas)
* Instalaci√≥n y gesti√≥n de librer√≠as (va a aparecer mucho m√°s adelante).



<!-- ## Conteo de palabras

Construya una funci√≥n que reciba una cadena de texto y devuelva un diccionario donde las claves
sean las palabras y los valores la cantidad de veces que aparece cada una. Para ello, realice
dos implementaciones

### Implementaci√≥n 1

Utilice el m√©todo `.split()` para 


Adem√°s, incorpore un
argumemento booleano llamado `ordenado` que permita determinar si las palabras se ordenan
seg√∫n orden de aparici√≥n o s


 lista de palabras y devuelva un diccionario donde las claves sean las palabras y los valores la cantidad de veces que aparece cada una. 
 
 

## Calculadora de variaci√≥n porcentual

Construya un programa que calcule c√≥mo ha variado un precio de un producto o servicio a lo
largo de una o varias semanas.

El programa debe pedir al usuario:

* Precio inicial
* Precio final
* Cantidad de semanas entre precios.

E imprimir un mensaje que incluya la variaci√≥n porcentual entre periodos y una variaci√≥n
porcentual anualizada.


## Persiguiendo la meta

En el Parque Independencia, la pista de atletismo del Estadio Municipal tiene una longitud de
400 metros. Lucio, un atleta rosarino, se estuvo preparando intensamente para una competencia de
400 los metros llanos.

En su cuenta de Instagram, Lucio public√≥ una historia que dec√≠a:

> "20 d√≠as, 100 kil√≥metros, 1 objetivo."

### Parte 1: An√°lisis inicial

Con base en esta informaci√≥n, responde las siguientes preguntas:

i. ¬øCu√°ntos metros corri√≥ Lucio por d√≠a en promedio?
i. ¬øCu√°ntas vueltas completas dio por d√≠a en promedio? ¬øLe sobr√≥ alg√∫n metro? ¬øCu√°ntos?
i. ¬øCu√°ntas vueltas completas dio en total durante los 20 d√≠as?

### Parte 2: Planificando el entrenamiento

Lucio est√° dise√±ando un plan de entrenamiento para su pr√≥xima competencia.
Quiere saber cu√°ntas vueltas dar√° en promedio por d√≠a y cu√°ntas vueltas completar√° en total al
final de su entrenamiento.

Escribe un programa que reciba:

* D√≠as de entrenamiento (un n√∫mero entero).
* Cantidad de metros a correr por d√≠a (un n√∫mero entero).

Y que devuelva:

* Vueltas completas promedio por d√≠a (en una pista de 400 metros).
* Vueltas completas totales al final del entrenamiento.
* Metros sobrantes por d√≠a, si los hay.

### Parte 3: Plan de entrenamiento avanzado

Lucio quiere un programa m√°s flexible para planificar su entrenamiento.
Ahora, adem√°s de los d√≠as de entrenamiento, quiere poder ingresar la cantidad total de vueltas
**o** la cantidad total de kil√≥metros que planea correr.

Escribe un programa que reciba:

* D√≠as de entrenamiento (un n√∫mero entero).
* Cantidad total de vueltas o cantidad total de kil√≥metros
(el usuario debe elegir una de las dos opciones).

Y que devuelva:

* Cantidad de metros y vueltas promedio por d√≠a.
* Cantidad total de metros y vueltas.


## N√∫meros impares

Utilice el tercer argumento de la funci√≥n `range()` para construir una lista con los n√∫meros impares
del 1 al 20. Luego, utilice un ciclo `for` para imprimir cada uno de ellos.

## Cubos

Un n√∫mero elevado a la tercera potencia se llama **cubo**. Por ejemplo, el cubo de 2 se escribe como
`2**3` en Python.

Cree una lista con los primeros 10 cubos (es decir, el cubo de los n√∫meros del 1 al 10).
Luego, utilice un ciclo `for` para imprimir el valor de cada cubo.

 -->